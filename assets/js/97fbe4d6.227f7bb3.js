(self.webpackChunkdevportal=self.webpackChunkdevportal||[]).push([[6770],{4137:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),u=l,y=p["".concat(i,".").concat(u)]||p[u]||m[u]||r;return a?n.createElement(y,o(o({ref:t},d),{},{components:a})):n.createElement(y,o({ref:t},d))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8448:function(e,t,a){"use strict";var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,l=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:l},t)}},7358:function(e,t,a){"use strict";a.d(t,{Z:function(){return c}});var n=a(7294),l=a(2713);var r=function(){var e=(0,n.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=a(6010),s="tabItem_1uMI",i="tabItemActive_2DSg";var c=function(e){var t,a=e.lazy,l=e.block,c=e.defaultValue,d=e.values,m=e.groupId,p=e.className,u=n.Children.toArray(e.children),y=null!=d?d:u.map((function(e){return{value:e.props.value,label:e.props.label}})),h=null!=c?c:null==(t=u.find((function(e){return e.props.default})))?void 0:t.props.value,g=r(),v=g.tabGroupChoices,k=g.setTabGroupChoices,T=(0,n.useState)(h),f=T[0],b=T[1],C=[];if(null!=m){var E=v[m];null!=E&&E!==f&&y.some((function(e){return e.value===E}))&&b(E)}var w=function(e){var t=e.currentTarget,a=C.indexOf(t),n=y[a].value;b(n),null!=m&&(k(m,n),setTimeout((function(){var e,a,n,l,r,o,s,c;(e=t.getBoundingClientRect(),a=e.top,n=e.left,l=e.bottom,r=e.right,o=window,s=o.innerHeight,c=o.innerWidth,a>=0&&r<=c&&l<=s&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},N=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.target)+1;a=C[n]||C[0];break;case"ArrowLeft":var l=C.indexOf(e.target)-1;a=C[l]||C[C.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},p)},y.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,className:(0,o.Z)("tabs__item",s,{"tabs__item--active":f===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:N,onFocus:w,onClick:w},null!=a?a:t)}))),a?(0,n.cloneElement)(u.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},u.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},2713:function(e,t,a){"use strict";var n=(0,a(7294).createContext)(void 0);t.Z=n},1896:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return m},default:function(){return u}});var n=a(2122),l=a(9756),r=(a(7294),a(4137)),o=a(7358),s=a(8448),i={id:"listening-for-payments-cli",title:"Listening for ada payments using cardano-cli",sidebar_label:"Receiving payments (cardano-cli)",description:"How to listen for ada Payments with the cardano-cli.",image:"./img/og-developer-portal.png"},c=void 0,d={unversionedId:"integrate-cardano/listening-for-payments-cli",id:"integrate-cardano/listening-for-payments-cli",isDocsHomePage:!1,title:"Listening for ada payments using cardano-cli",description:"How to listen for ada Payments with the cardano-cli.",source:"@site/docs/integrate-cardano/listening-for-payments-cli.md",sourceDirName:"integrate-cardano",slug:"/integrate-cardano/listening-for-payments-cli",permalink:"/docs/integrate-cardano/listening-for-payments-cli",editUrl:"https://github.com/cardano-foundation/developer-portal/edit/staging/docs/integrate-cardano/listening-for-payments-cli.md",tags:[],version:"current",lastUpdatedBy:"Tommy",lastUpdatedAt:1632486943,formattedLastUpdatedAt:"9/24/2021",frontMatter:{id:"listening-for-payments-cli",title:"Listening for ada payments using cardano-cli",sidebar_label:"Receiving payments (cardano-cli)",description:"How to listen for ada Payments with the cardano-cli.",image:"./img/og-developer-portal.png"},sidebar:"someSidebar",previous:{title:"Multi-witness transactions",permalink:"/docs/integrate-cardano/multi-witness-transactions-cli"},next:{title:"Receiving payments (cardano-wallet)",permalink:"/docs/integrate-cardano/listening-for-payments-wallet"}},m=[{value:"Overview",id:"overview",children:[]},{value:"Use case",id:"use-case",children:[]},{value:"Technical flow",id:"technical-flow",children:[]},{value:"Time to code",id:"time-to-code",children:[{value:"Generate keys and request tAda",id:"generate-keys-and-request-tada",children:[]},{value:"Initial variables",id:"initial-variables",children:[]},{value:"Read wallet address value",id:"read-wallet-address-value",children:[]},{value:"Query UTxO",id:"query-utxo",children:[]},{value:"Process UTxO table",id:"process-utxo-table",children:[]},{value:"Determine if payment is succesful",id:"determine-if-payment-is-succesful",children:[]}]},{value:"Running and testing",id:"running-and-testing",children:[]},{value:"Complete the payment",id:"complete-the-payment",children:[]}],p={toc:m};function u(e){var t=e.components,i=(0,l.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This guide assumes that you have basic understanding of ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli"),", how to use it and that you have installed it into your system. Otherwise we recommend reading ",(0,r.kt)("a",{parentName:"p",href:"/docs/get-started/installing-cardano-node"},"Installing cardano-node"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/get-started/running-cardano"},"Running cardano-node")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/integrate-cardano/creating-wallet-faucet"},"Exploring Cardano Wallets")," guides first."),(0,r.kt)("p",{parentName:"div"},"This guide also assumes that you have ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-node")," running in the background and connected to the ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," network."))),(0,r.kt)("h2",{id:"use-case"},"Use case"),(0,r.kt)("p",null,"There are many possible reasons why you would want to have the functionality of listening for ",(0,r.kt)("inlineCode",{parentName:"p"},"ada")," payments, but a very obvious use case would be for something like an ",(0,r.kt)("strong",{parentName:"p"},"online shop")," or a ",(0,r.kt)("strong",{parentName:"p"},"payment gateway")," that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"ada")," tokens as the currency."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:a(4118).Z})),(0,r.kt)("h2",{id:"technical-flow"},"Technical flow"),(0,r.kt)("p",null,"To understand how something like this could work in a technical point of view, let's take a look at the following diagram:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:a(3116).Z})),(0,r.kt)("p",null,"So let's imagine a very basic scenario where a ",(0,r.kt)("strong",{parentName:"p"},"customer")," is browsing an online shop. Once the user has choosen and added all the items into the ",(0,r.kt)("strong",{parentName:"p"},"shopping cart"),". The next step would then be to checkout and pay for the items, Of course we will be using ",(0,r.kt)("strong",{parentName:"p"},"Cardano")," for that!"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"front-end")," application would then request for a ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," from the backend service and render a QR code to the ",(0,r.kt)("strong",{parentName:"p"},"customer")," to be scanned via a ",(0,r.kt)("strong",{parentName:"p"},"Cardano wallet"),". The backend service would then know that it has to query the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," with a certain time interval to confirm and alert the ",(0,r.kt)("strong",{parentName:"p"},"front-end")," application that the payment has completed succesfully."),(0,r.kt)("p",null,"In the meantime the transaction is then being processed and settled within the ",(0,r.kt)("strong",{parentName:"p"},"Cardano")," network. We can see in the diagram above that both parties are ultimately connected to the network via the ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-node")," software component."),(0,r.kt)("h2",{id:"time-to-code"},"Time to code"),(0,r.kt)("p",null,"Now let's get our hands dirty and see how we can implement something like this in actual code."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In this section, We will use the path ",(0,r.kt)("inlineCode",{parentName:"p"},"/home/user/receive-ada-sample")," to store all the related files as an example, please replace it with the directory you have choosen to store the files.\nAll the code examples in this article assumes that you will save all the source-code-files under the root of this directory."))),(0,r.kt)("h3",{id:"generate-keys-and-request-tada"},"Generate keys and request tAda"),(0,r.kt)("p",null,"First, lets create a directory to store our sample project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /home/user/receive-ada-sample/keys\n")),(0,r.kt)("p",null,"Next, we generate our ",(0,r.kt)("strong",{parentName:"p"},"payment key-pair")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cardano-cli address key-gen \\\n--verification-key-file /home/user/receive-ada-sample/keys/payment.vkey \\\n--signing-key-file /home/user/receive-ada-sample/keys/payment.skey\n")),(0,r.kt)("p",null,"Since we now have our ",(0,r.kt)("strong",{parentName:"p"},"payment key-pair"),", the next step would be to generate a ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"testnet")," network like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cardano-cli address build \\\n--payment-verification-key-file /home/user/receive-ada-sample/keys/payment.vkey \\\n--out-file /home/user/receive-ada-sample/keys/payment.addr \\\n--testnet-magic 1097911063\n")),(0,r.kt)("p",null,"Your directory structure should now look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/home/user/receive-ada-sample/receive-ada-sample\n\u2514\u2500\u2500 keys\n    \u251c\u2500\u2500 payment.addr\n    \u251c\u2500\u2500 payment.skey\n    \u2514\u2500\u2500 payment.vkey\n")),(0,r.kt)("p",null,"Now using your ",(0,r.kt)("strong",{parentName:"p"},"programming language")," of choice we create our first few lines of code!"),(0,r.kt)("h3",{id:"initial-variables"},"Initial variables"),(0,r.kt)("p",null,"First we will set the initial variables that we will be using as explained below:"),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},"import * as fs from 'fs';\n// Please add this dependency using npm install node-cmd\nimport cmd from 'node-cmd';\n\n// Path to the cardano-cli binary or use the global one\nconst CARDANO_CLI_PATH = \"cardano-cli\";\n// The `testnet` identifier number\nconst CARDANO_NETWORK_MAGIC = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample\nconst CARDANO_KEYS_DIR = \"keys\";\n// The total payment we expect in lovelace unit\nconst TOTAL_EXPECTED_LOVELACE = 1000000;\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},"import * as fs from 'fs';\n// Please add this dependency using npm install node-cmd but there is no @type definition for it\nconst cmd: any = require('node-cmd');\n\n// Path to the cardano-cli binary or use the global one\nconst CARDANO_CLI_PATH: string = \"cardano-cli\";\n// The `testnet` identifier number\nconst CARDANO_NETWORK_MAGIC: number = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample/receive-ada-sample\nconst CARDANO_KEYS_DIR: string = \"keys\";\n// The total payment we expect in lovelace unit\nconst TOTAL_EXPECTED_LOVELACE: number = 1000000;\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},'import os\nimport subprocess\n\n# Path to the cardano-cli binary or use the global one\nCARDANO_CLI_PATH = "cardano-cli"\n# The `testnet` identifier number\nCARDANO_NETWORK_MAGIC = 1097911063\n# The directory where we store our payment keys\n# assuming our current directory context is /home/user/receive-ada-sample\nCARDANO_KEYS_DIR = "keys"\n# The total payment we expect in lovelace unit\nTOTAL_EXPECTED_LOVELACE = 1000000\n'))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'using System.Linq;\nusing SimpleExec; // `dotnet add package SimpleExec --version 7.0.0`\n\n// Path to the cardano-cli binary or use the global one\nconst string CARDANO_CLI_PATH = "cardano-cli";\n// The `testnet` identifier number\nconst int CARDANO_NETWORK_MAGIC = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample\nconst string CARDANO_KEYS_DIR = "keys";\n// The total payment we expect in lovelace unit\nconst long TOTAL_EXPECTED_LOVELACE = 1000000;\n')))),(0,r.kt)("h3",{id:"read-wallet-address-value"},"Read wallet address value"),(0,r.kt)("p",null,"Next, we get the string value of the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"payment.addr")," file that we generated awhile ago. Add the following lines to your code:"),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},"// Read wallet address value from payment.addr file\nconst walletAddress = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},"// Read wallet address string value from payment.addr file\nconst walletAddress: string = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},"# Read wallet address value from payment.addr file\nwith open(os.path.join(CARDANO_KEYS_DIR, \"payment.addr\"), 'r') as file:\n    walletAddress = file.read()\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'// Read wallet address value from payment.addr file\nvar walletAddress = await System.IO.File.ReadAllTextAsync($"{CARDANO_KEYS_DIR}/payment1.addr");\n')))),(0,r.kt)("h3",{id:"query-utxo"},"Query UTxO"),(0,r.kt)("p",null,"Then we execute ",(0,r.kt)("inlineCode",{parentName:"p"},"cardano-cli")," programatically and telling it to query the ",(0,r.kt)("strong",{parentName:"p"},"UTxO")," for the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," that we have generated with our keys and save the ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," result to our ",(0,r.kt)("inlineCode",{parentName:"p"},"rawUtxoTable")," variable."),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},'// We use the node-cmd npm library to execute shell commands and read the output data\nconst rawUtxoTable = cmd.runSync([\n    CARDANO_CLI_PATH,\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n].join(" "));\n'))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},'// We use the node-cmd npm library to execute shell commands and read the output data\nconst rawUtxoTable: any = cmd.runSync([\n    CARDANO_CLI_PATH,\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n].join(" "));\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},"# We tell python to execute cardano-cli shell command to query the UTXO and read the output data\nrawUtxoTable = subprocess.check_output([\n    CARDANO_CLI_PATH,\n    'query', 'utxo',\n    '--testnet-magic', str(CARDANO_NETWORK_MAGIC),\n    '--address', walletAddress])\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'// We use the SimpleExec dotnet library to execute shell commands and read the output data\nvar rawUtxoTable = await Command.ReadAsync(CARDANO_CLI_PATH, string.Join(" ",\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n), noEcho: true);\n')))),(0,r.kt)("h3",{id:"process-utxo-table"},"Process UTxO table"),(0,r.kt)("p",null,"Once we have access to the ",(0,r.kt)("strong",{parentName:"p"},"UTXO")," table string, we will then parse it and compute the total lovelace that the wallet currently has."),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},"// Calculate total lovelace of the UTXO(s) inside the wallet address\nconst utxoTableRows = rawUtxoTable.data.trim().split('\\n');\nlet totalLovelaceRecv = 0;\nlet isPaymentComplete = false;\n\nfor (let x = 2; x < utxoTableRows.length; x++) {\n    const cells = utxoTableRows[x].split(\" \").filter(i => i);\n    totalLovelaceRecv += parseInt(cells[2]);\n}\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},"// Calculate total lovelace of the UTXO(s) inside the wallet address\nconst utxoTableRows: string[] = rawUtxoTable.data.trim().split('\\n');\nlet totalLovelaceRecv: number = 0;\nlet isPaymentComplete: boolean = false;\n\nfor (let x = 2; x < utxoTableRows.length; x++) {\n    const cells = utxoTableRows[x].split(\" \").filter((i: string) => i);\n    totalLovelaceRecv += parseInt(cells[2]);\n}\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},"# Calculate total lovelace of the UTXO(s) inside the wallet address\nutxoTableRows = rawUtxoTable.strip().splitlines()\ntotalLovelaceRecv = 0\nisPaymentComplete = False\n\nfor x in range(2, len(utxoTableRows)):\n    cells = utxoTableRows[x].split()\n    totalLovelaceRecv +=  int(cells[2])\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'// Calculate total lovelace of the UTXO(s) inside the wallet address\nvar utxoTableRows = rawUtxoTable.Trim().Split("\\n");\nvar totalLovelaceRecv = 0L;\nvar isPaymentComplete = false;\n\nforeach(var row in utxoTableRows.Skip(2)){\n    var cells = row.Split(" ").Where(c => c.Trim() != string.Empty);\n    totalLovelaceRecv +=  long.Parse(cells.ElementAt(2));\n}\n')))),(0,r.kt)("h3",{id:"determine-if-payment-is-succesful"},"Determine if payment is succesful"),(0,r.kt)("p",null,"Once we have the total lovelace amount, we will then determine using our code if a specific payment is a success, ultimately sending or shipping the item if it is indeed succesful. In our example, we expect that the payment is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1,000,000 lovelace")," that we defined in our ",(0,r.kt)("inlineCode",{parentName:"p"},"TOTAL_EXPECTED_LOVELACE")," constant variable."),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},'// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);\nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);\nconsole.log(`Payment Complete: ${(isPaymentComplete ? "\u2705" : "\u274c")}`);\n'))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},'// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);\nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);\nconsole.log(`Payment Complete: ${(isPaymentComplete ? "\u2705" : "\u274c")}`);\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},'# Determine if the total lovelace received is more than or equal to\n# the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE\n\nprint("Total Received: %s LOVELACE" % totalLovelaceRecv)\nprint("Expected Payment: %s LOVELACE" % TOTAL_EXPECTED_LOVELACE)\nprint("Payment Complete: %s" % {True: "\u2705", False: "\u274c"} [isPaymentComplete])\n'))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nSystem.Console.WriteLine($"Total Received: {totalLovelaceRecv} LOVELACE");\nSystem.Console.WriteLine($"Expected Payment: {TOTAL_EXPECTED_LOVELACE} LOVELACE");\nSystem.Console.WriteLine($"Payment Complete: {(isPaymentComplete ? "\u2705":"\u274c")}");\n')))),(0,r.kt)("h2",{id:"running-and-testing"},"Running and testing"),(0,r.kt)("p",null,"Our final code should look something like this:"),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="checkPayment.js"',title:'"checkPayment.js"'},'import * as fs from \'fs\';\n// Please add this dependency using npm install node-cmd\nimport cmd from \'node-cmd\';\n\n// Path to the cardano-cli binary or use the global one\nconst CARDANO_CLI_PATH = "cardano-cli";\n// The `testnet` identifier number\nconst CARDANO_NETWORK_MAGIC = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample/receive-ada-sample\nconst CARDANO_KEYS_DIR = "keys";\n// The imaginary total payment we expect in lovelace unit\nconst TOTAL_EXPECTED_LOVELACE = 1000000;\n\n// Read wallet address string value from payment.addr file\nconst walletAddress = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();\n\n// We use the node-cmd npm library to execute shell commands and read the output data\nconst rawUtxoTable = cmd.runSync([\n    CARDANO_CLI_PATH,\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n].join(" "));\n\n// Calculate total lovelace of the UTXO(s) inside the wallet address\nconst utxoTableRows = rawUtxoTable.data.trim().split(\'\\n\');\nlet totalLovelaceRecv = 0;\nlet isPaymentComplete = false;\n\nfor(let x = 2; x < utxoTableRows.length; x++) {\n    const cells = utxoTableRows[x].split(" ").filter(i => i);\n    totalLovelaceRecv += parseInt(cells[2]);\n}\n\n// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);\nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);\nconsole.log(`Payment Complete: ${(isPaymentComplete ? "\u2705" : "\u274c")}`);\n'))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="checkPayment.ts"',title:'"checkPayment.ts"'},'import * as fs from \'fs\';\n// Please add this dependency using npm install node-cmd but there is no @type definition for it\nconst cmd: any = require(\'node-cmd\');\n\n// Path to the cardano-cli binary or use the global one\nconst CARDANO_CLI_PATH: string = "cardano-cli";\n// The `testnet` identifier number\nconst CARDANO_NETWORK_MAGIC: number = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample/receive-ada-sample\nconst CARDANO_KEYS_DIR: string = "keys";\n// The imaginary total payment we expect in lovelace unit\nconst TOTAL_EXPECTED_LOVELACE: number = 1000000;\n\n// Read wallet address string value from payment.addr file\nconst walletAddress: string = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();\n\n// We use the node-cmd npm library to execute shell commands and read the output data\nconst rawUtxoTable: any = cmd.runSync([\n    CARDANO_CLI_PATH,\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n].join(" "));\n\n// Calculate total lovelace of the UTXO(s) inside the wallet address\nconst utxoTableRows: string[] = rawUtxoTable.data.trim().split(\'\\n\');\nlet totalLovelaceRecv: number = 0;\nlet isPaymentComplete: boolean = false;\n\nfor (let x = 2; x < utxoTableRows.length; x++) {\n    const cells = utxoTableRows[x].split(" ").filter((i: string) => i);\n    totalLovelaceRecv += parseInt(cells[2]);\n}\n\n// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);\nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);\nconsole.log(`Payment Complete: ${(isPaymentComplete ? "\u2705" : "\u274c")}`);\n'))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Program.cs"',title:'"Program.cs"'},'using System;\nusing System.IO;\nusing System.Linq;\n\n// Install using command `dotnet add package SimpleExec --version 7.0.0`\nusing SimpleExec;\n\n// Path to the cardano-cli binary or use the global one\nconst string CARDANO_CLI_PATH = "cardano-cli";\n// The `testnet` identifier number\nconst int CARDANO_NETWORK_MAGIC = 1097911063;\n// The directory where we store our payment keys\n// assuming our current directory context is /home/user/receive-ada-sample\nconst string CARDANO_KEYS_DIR = "keys";\n// The total payment we expect in lovelace unit\nconst long TOTAL_EXPECTED_LOVELACE = 1000000;\n\n// Read wallet address string value from payment.addr file\nvar walletAddress = await File.ReadAllTextAsync(Path.Combine(CARDANO_KEYS_DIR, "payment.addr"));\n\n// We use the SimpleExec library to execute cardano-cli shell command to query the wallet UTXO and read the output data\nvar rawUtxoTable = await Command.ReadAsync(CARDANO_CLI_PATH, string.Join(" ",\n    "query", "utxo",\n    "--testnet-magic", CARDANO_NETWORK_MAGIC,\n    "--address", walletAddress\n), noEcho: true);\n\n// Calculate total lovelace of the UTXO(s) inside the wallet address\nvar utxoTableRows = rawUtxoTable.Trim().Split("\\n");\nvar totalLovelaceRecv = 0L;\nvar isPaymentComplete = false;\n\nforeach(var row in utxoTableRows.Skip(2)){\n    var cells = row.Split(" ").Where(c => c.Trim() != string.Empty);\n    totalLovelaceRecv +=  long.Parse(cells.ElementAt(2));\n}\n\n// Determine if the total lovelace received is more than or equal to\n// the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;\n\nConsole.WriteLine($"Total Received: {totalLovelaceRecv} LOVELACE");\nConsole.WriteLine($"Expected Payment: {TOTAL_EXPECTED_LOVELACE} LOVELACE");\nConsole.WriteLine($"Payment Complete: {(isPaymentComplete ? "\u2705":"\u274c")}");\n'))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="checkPayment.py"',title:'"checkPayment.py"'},'import os\nimport subprocess\n\n# Path to the cardano-cli binary or use the global one\nCARDANO_CLI_PATH = "cardano-cli"\n# The `testnet` identifier number\nCARDANO_NETWORK_MAGIC = 1097911063\n# The directory where we store our payment keys\n# assuming our current directory context is /home/user/receive-ada-sample\nCARDANO_KEYS_DIR = "keys"\n# The total payment we expect in lovelace unit\nTOTAL_EXPECTED_LOVELACE = 1000000\n\n# Read wallet address value from payment.addr file\nwith open(os.path.join(CARDANO_KEYS_DIR, "payment.addr"), \'r\') as file:\n    walletAddress = file.read()\n\n# We tell python to execute cardano-cli shell command to query the UTXO and read the output data\nrawUtxoTable = subprocess.check_output([\n    CARDANO_CLI_PATH,\n    \'query\', \'utxo\',\n    \'--testnet-magic\', str(CARDANO_NETWORK_MAGIC),\n    \'--address\', walletAddress])\n\n# Calculate total lovelace of the UTXO(s) inside the wallet address\nutxoTableRows = rawUtxoTable.strip().splitlines()\ntotalLovelaceRecv = 0\nisPaymentComplete = False\n\nfor x in range(2, len(utxoTableRows)):\n    cells = utxoTableRows[x].split()\n    totalLovelaceRecv +=  int(cells[2])\n\n# Determine if the total lovelace received is more than or equal to\n# the total expected lovelace and displaying the results.\nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE\n\nprint("Total Received: %s LOVELACE" % totalLovelaceRecv)\nprint("Expected Payment: %s LOVELACE" % TOTAL_EXPECTED_LOVELACE)\nprint("Payment Complete: %s" % {True: "\u2705", False: "\u274c"} [isPaymentComplete])\n')))),(0,r.kt)("p",null,"Your project directory should look something like this:"),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Excluding node_modules directory\n\n/home/user/receive-ada-sample/receive-ada-sample\n\u251c\u2500\u2500 checkPayment.js\n\u251c\u2500\u2500 keys\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.addr\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.skey\n\u2502\xa0\xa0 \u2514\u2500\u2500 payment.vkey\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n\n1 directories, 6 files\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Excluding node_modules directory\n\n/home/user/receive-ada-sample/receive-ada-sample\n\u251c\u2500\u2500 checkPayment.ts\n\u251c\u2500\u2500 keys\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.addr\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.skey\n\u2502\xa0\xa0 \u2514\u2500\u2500 payment.vkey\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n\n1 directories, 6 files\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Excluding bin and obj directories\n\n/home/user/receive-ada-sample/receive-ada-sample\n\u251c\u2500\u2500 Program.cs\n\u251c\u2500\u2500 dotnet.csproj\n\u251c\u2500\u2500 keys\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.addr\n\u2502\xa0\xa0 \u251c\u2500\u2500 payment.skey\n\u2502\xa0\xa0 \u2514\u2500\u2500 payment.vkey\n\n1 directories, 5 files\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/home/user/receive-ada-sample/receive-ada-sample\n\u251c\u2500\u2500 checkPayment.py\n\u2514\u2500\u2500 keys\n    \u251c\u2500\u2500 payment.addr\n    \u251c\u2500\u2500 payment.skey\n    \u2514\u2500\u2500 payment.vkey\n\n1 directory, 4 files\n")))),(0,r.kt)("p",null,"Now we are ready to test \ud83d\ude80, running the code should give us the following result:"),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f node checkPayment.js\nTotal Received: 0 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u274c\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ts-node checkPayment.ts\nTotal Received: 0 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u274c\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f dotnet run\nTotal Received: 0 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u274c\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f python checkPayment.py \nTotal Received: 0 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u274c\n")))),(0,r.kt)("p",null,"The code is telling us that our current wallet has received a total of ",(0,r.kt)("inlineCode",{parentName:"p"},"0 lovelace")," and it expected ",(0,r.kt)("inlineCode",{parentName:"p"},"1,000,000 lovelace"),", therefore it concluded that the payment is not complete."),(0,r.kt)("h2",{id:"complete-the-payment"},"Complete the payment"),(0,r.kt)("p",null,"What we can do to simulate a succesful payment is to send atleast ",(0,r.kt)("inlineCode",{parentName:"p"},"1,000,000 lovelace")," into the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," that we have just generated for this project. We can get the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," by reading the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"payment.addr")," file like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat /home/user/receive-ada-sample/receive-ada-sample/keys/payment.addr\n")),(0,r.kt)("p",null,"You should see the ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"addr_test1vpfkp665a6wn7nxvjql5vdn5g5a94tc22njf4lf98afk6tgnz5ge4\n")),(0,r.kt)("p",null,"Now simply send atleast ",(0,r.kt)("inlineCode",{parentName:"p"},"1,000,000 lovelace")," to this ",(0,r.kt)("strong",{parentName:"p"},"wallet address")," or request some ",(0,r.kt)("inlineCode",{parentName:"p"},"test ada")," funds from the ",(0,r.kt)("a",{parentName:"p",href:"../integrate-cardano/testnet-faucet"},"Cardano Testnet Faucet"),". Once complete, we can now run the code again and we should see a succesful result this time."),(0,r.kt)(o.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"Typescript",value:"ts"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f node checkPayment.js\nTotal Received: 1000000000 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u2705\n"))),(0,r.kt)(s.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f ts-node checkPayment.ts\nTotal Received: 1000000000 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u2705\n"))),(0,r.kt)(s.Z,{value:"cs",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f dotnet run\nTotal Received: 1000000000 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u2705\n"))),(0,r.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"\u276f python checkPayment.py \nTotal Received: 1000000000 LOVELACE\nExpected Payment: 1000000 LOVELACE\nPayment Complete: \u2705\n")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It might take 20 seconds or more for the transaction to propagate within the network depending on the network health, so you will have to be patient."))),(0,r.kt)("p",null,"Congratulations, you are now able to detect succesful ",(0,r.kt)("strong",{parentName:"p"},"Cardano")," payments programatically. This should help you bring integrations to your existing or new upcoming applications. \ud83c\udf89\ud83c\udf89\ud83c\udf89"))}u.isMDXComponent=!0},6010:function(e,t,a){"use strict";function n(e){var t,a,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(l&&(l+=" "),l+=a);else for(t in e)e[t]&&(l&&(l+=" "),l+=t);return l}function l(){for(var e,t,a=0,l="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(l&&(l+=" "),l+=t);return l}a.d(t,{Z:function(){return l}})},4118:function(e,t,a){"use strict";t.Z=a.p+"assets/images/ada-online-shop-0dee5526d39fa5fc40c8e722f1fd0f6b.png"},3116:function(e,t,a){"use strict";t.Z=a.p+"assets/images/ada-payment-flow-f0a181dfded88ff3b8ad9b4c1e6a3cf4.png"}}]);