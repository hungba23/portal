(self.webpackChunkdevportal=self.webpackChunkdevportal||[]).push([[6549],{4137:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1263:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var o=n(2122),r=n(9756),a=(n(7294),n(4137)),i={id:"use-cli",title:"Command Line Interface",sidebar_label:"Command Line Interface",description:"Stake pool course: Learn how to use command line interface (cli).",image:"./img/og-developer-portal.png"},l=void 0,c={unversionedId:"stake-pool-course/handbook/use-cli",id:"stake-pool-course/handbook/use-cli",isDocsHomePage:!1,title:"Command Line Interface",description:"Stake pool course: Learn how to use command line interface (cli).",source:"@site/docs/stake-pool-course/handbook/use-cli.md",sourceDirName:"stake-pool-course/handbook",slug:"/stake-pool-course/handbook/use-cli",permalink:"/docs/stake-pool-course/handbook/use-cli",editUrl:"https://github.com/cardano-foundation/developer-portal/edit/staging/docs/stake-pool-course/handbook/use-cli.md",tags:[],version:"current",lastUpdatedBy:"katomm",lastUpdatedAt:1625336488,formattedLastUpdatedAt:"7/4/2021",frontMatter:{id:"use-cli",title:"Command Line Interface",sidebar_label:"Command Line Interface",description:"Stake pool course: Learn how to use command line interface (cli).",image:"./img/og-developer-portal.png"},sidebar:"someSidebar",previous:{title:"Setup Firewall",permalink:"/docs/stake-pool-course/handbook/setup-firewall"},next:{title:"Classic UTxO model",permalink:"/docs/stake-pool-course/handbook/utxo-model"}},s=[],u={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This command line interface provides a collection of tools for key generation, transaction construction, certificate creation and other important tasks."),(0,a.kt)("p",null,"It is organized in a hierarchy of subcommands, and each level comes with its own built-in documentation of command syntax and options."),(0,a.kt)("p",null,"We can get the top level help by simply typing the command without arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cardano-cli\n")),(0,a.kt)("p",null,"We will be told that one available subcommand is ",(0,a.kt)("inlineCode",{parentName:"p"},"node"),", and typing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cardano-cli node\n")),(0,a.kt)("p",null,"will display available sub-subcommands, one of which is ",(0,a.kt)("inlineCode",{parentName:"p"},"key-gen"),". Typing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cardano-cli node key-gen\n")),(0,a.kt)("p",null,"will inform us about the parameters this command takes, so we can for example generate a key-pair of offline keys and a file for the issue counter by typing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cardano-cli node key-gen \\\n--cold-verification-key-file cold.vkey \\\n--cold-signing-key-file cold.skey \\\n--operational-certificate-issue-counter-file cold.counter\n")))}p.isMDXComponent=!0}}]);