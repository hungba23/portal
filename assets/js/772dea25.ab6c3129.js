(self.webpackChunkdevportal=self.webpackChunkdevportal||[]).push([[2533],{4137:function(e,a,n){"use strict";n.d(a,{Zo:function(){return c},kt:function(){return m}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),d=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=d(e.components);return t.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return n?t.createElement(h,i(i({ref:a},c),{},{components:n})):t.createElement(h,i({ref:a},c))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<s;d++)i[d]=n[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8427:function(e,a,n){"use strict";n.r(a),n.d(a,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var t=n(2122),r=n(9756),s=(n(7294),n(4137)),i={id:"cardanosharp-wallet",title:"Get Started with CardanoSharp Wallet",sidebar_label:"CardanoSharp Wallet",description:"Get Started with CardanoSharp Wallet",image:"./img/og-developer-portal.png"},o="CardanoSharp.Wallet",l={unversionedId:"get-started/cardanosharp-wallet",id:"get-started/cardanosharp-wallet",isDocsHomePage:!1,title:"Get Started with CardanoSharp Wallet",description:"Get Started with CardanoSharp Wallet",source:"@site/docs/get-started/cardanosharp-wallet.md",sourceDirName:"get-started",slug:"/get-started/cardanosharp-wallet",permalink:"/docs/get-started/cardanosharp-wallet",editUrl:"https://github.com/cardano-foundation/developer-portal/edit/staging/docs/get-started/cardanosharp-wallet.md",tags:[],version:"current",lastUpdatedBy:"Kyle Johns",lastUpdatedAt:1628764758,formattedLastUpdatedAt:"8/12/2021",frontMatter:{id:"cardanosharp-wallet",title:"Get Started with CardanoSharp Wallet",sidebar_label:"CardanoSharp Wallet",description:"Get Started with CardanoSharp Wallet",image:"./img/og-developer-portal.png"},sidebar:"someSidebar",previous:{title:"Ogmios",permalink:"/docs/get-started/ogmios"},next:{title:"Overview",permalink:"/docs/get-started/cardano-serialization-lib/overview"}},d=[{value:"Features",id:"features",children:[]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Generate a Mnemonic",id:"generate-a-mnemonic",children:[]},{value:"Create Private and Public Keys",id:"create-private-and-public-keys",children:[]},{value:"Create Addresses",id:"create-addresses",children:[{value:"NetworkType",id:"networktype",children:[]},{value:"AddressType",id:"addresstype",children:[]}]},{value:"Build and Sign Transactions",id:"build-and-sign-transactions",children:[{value:"Calculate Fees",id:"calculate-fees",children:[]},{value:"Adding Metadata",id:"adding-metadata",children:[]},{value:"More Examples",id:"more-examples",children:[]}]}],c={toc:d};function p(e){var a=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"cardanosharpwallet"},"CardanoSharp.Wallet"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://ci.appveyor.com/project/nothingalike/cardanosharp-wallet/branch/main"},(0,s.kt)("img",{parentName:"a",src:"https://ci.appveyor.com/api/projects/status/knh87k86mf7gbxyo?svg=true",alt:"Build status"}))," ",(0,s.kt)("a",{parentName:"p",href:"https://ci.appveyor.com/project/nothingalike/cardanosharp-wallet/branch/main"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/appveyor/tests/nothingalike/cardanosharp-wallet",alt:"Test status"}))," ",(0,s.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/CardanoSharp.Wallet/"},(0,s.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/CardanoSharp.Wallet.svg?style=flat",alt:"NuGet Version"}))," ",(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/nuget/dt/CardanoSharp.Wallet.svg",alt:"NuGet Downloads"})),(0,s.kt)("p",null,"CardanoSharp Wallet is a .NET library for Creating/Managing Wallets and Building/Signing Transactions."),(0,s.kt)("h2",{id:"features"},"Features"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Generate Mnemonics"),(0,s.kt)("li",{parentName:"ul"},"Create Private and Public Keys"),(0,s.kt)("li",{parentName:"ul"},"Create Addresses"),(0,s.kt)("li",{parentName:"ul"},"Build Transactions"),(0,s.kt)("li",{parentName:"ul"},"Sign Transactions")),(0,s.kt)("h2",{id:"getting-started"},"Getting Started"),(0,s.kt)("p",null,"CardanoSharp.Wallet is installed from NuGet."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"Install-Package CardanoSharp.Wallet\n")),(0,s.kt)("h2",{id:"generate-a-mnemonic"},"Generate a Mnemonic"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using CardanoSharp.Wallet;\nusing CardanoSharp.Wallet.Enums;\nusing CardanoSharp.Wallet.Models.Keys;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // The KeyServices exposes functions for Mnemonics and Deriving Keys\n        var keyService = new KeyService();\n        // The AddressService allows us to create Addresses from our Public Keys\n        var addressService = new AddressService();\n        // 24 represents the number of words we want for our Mnemonic\n        int size = 24;\n\n        // This will generate a 24 English Mnemonic\n        Mnemonic mnemonic = keyService.Generate(size, WordLists.English);\n        System.Console.WriteLine(mnemonic.Words);\n    }\n}\n")),(0,s.kt)("h2",{id:"create-private-and-public-keys"},"Create Private and Public Keys"),(0,s.kt)("p",null,"Add powerful extensions to create and derive keys."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using CardanoSharp.Wallet.Extensions.Models;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"// The masterKey is a PrivateKey made of up of the \n//  - byte[] Key\n//  - byte[] Chaincode\nPrivateKey masterKey = mnemonic.GetRootKey();\n\n// This path will give us our Payment Key on index 0\nstring paymentPath = $\"m/1852'/1815'/0'/0/0\";\n// The paymentPrv is another Tuple with the Private Key and Chain Code\nPrivateKey paymentPrv = masterKey.Derive(paymentPath);\n// Get the Public Key from the Payment Private Key\nPublicKey paymentPub = paymentPrv.GetPublicKey(false);\n\n// This path will give us our Stake Key on index 0\nstring stakePath = $\"m/1852'/1815'/0'/2/0\";\n// The stakePrv is another Tuple with the Private Key and Chain Code\nvar stakePrv = masterKey.Derive(stakePath);\n// Get the Public Key from the Stake Private Key\nvar stakePub = stakePrv.GetPublicKey(false);\n")),(0,s.kt)("h2",{id:"create-addresses"},"Create Addresses"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"// Creating Addresses require the Public Payment and Stake Keys\nAddress baseAddr = addressService.GetAddress(\n    paymentPub, \n    stakePub, \n    NetworkType.Testnet, \n    AddressType.Base);\n")),(0,s.kt)("h3",{id:"networktype"},"NetworkType"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace CardanoSharp.Wallet.Enums\n{\n    public enum NetworkType\n    {\n        Testnet,\n        Mainnet\n    }\n}\n")),(0,s.kt)("h3",{id:"addresstype"},"AddressType"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace CardanoSharp.Wallet.Enums\n{\n    public enum AddressType\n    {\n        Base,\n        Enterprise,\n        Reward\n    }\n}\n")),(0,s.kt)("h2",{id:"build-and-sign-transactions"},"Build and Sign Transactions"),(0,s.kt)("p",null,"This is just an example of how to start. You will need to Calculate Fees, compare with Protocol Parameters and re-serialize."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"using CardanoSharp.Wallet.Models.Transactions;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"// The Transaction Builder allows us to contruct and serialize our Transaction\nusing CardanoSharp.Wallet.Models.Transactions;\nusing CardanoSharp.Wallet.Extensions.Models.Transactions;\n//For CBOR Utilities\nusing PeterO.Cbor2;\n\n// Create the Transaction Body\n//  The Transaction Body:\n//      Supported\n//       - Transaction Inputs\n//       - Transaction Outputs\n//       - Fee\n//       - TTL\n//       - Certificates\n//       - Metadata Hash\n//      Coming Soon\n//       - Transaction Start Interval\n//       - Withdrawls\n//       - Mint\nvar transactionBody = new TransactionBody()\n{\n    TransactionInputs = new List<TransactionInput>()\n    {\n        new TransactionInput()\n        {\n            TransactionIndex = 0,\n            TransactionId = new byte[32]\n        }\n    },\n    TransactionOutputs = new List<TransactionOutput>()\n    {\n        new TransactionOutput()\n        {\n            Address = baseAddr.GetBytes(),\n            Value = new TransactionOutputValue()\n            {\n                Coin = 1\n            }\n        }\n    },\n    Ttl = 10,\n    Fee = 0\n};\n\n// Add our witness(es)\n//  Currently we only support VKey Witnesses\nvar witnesses = new TransactionWitnessSet()\n{\n    VKeyWitnesses = new List<VKeyWitness>()\n    {\n        new VKeyWitness()\n        {\n            VKey = paymentPub.Key,\n            SKey = paymentPrv.Key\n        }\n    }\n};\n\n// Create Transaction\nvar transaction = new Transaction()\n{\n    TransactionBody = transactionBody,\n    TransactionWitnessSet = witnesses\n};\n\n// Serialize Transaction with Body and Witnesses\n//  This results in a Signed Transaction\nvar signedTxSerialized = transaction.Serialize();\n")),(0,s.kt)("h3",{id:"calculate-fees"},"Calculate Fees"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"// From Current Protocol Parameters\n// 44     = txFeePerByte\n// 155381 = txFeeFixed\nvar fee = transaction.CalculateFee(44, 155381);\n")),(0,s.kt)("h3",{id:"adding-metadata"},"Adding Metadata"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'var auxData = new AuxiliaryData()\n{\n    Metadata = new Dictionary<int, object>()\n    {\n        { 1234, new { name = "simple message" } }\n    }\n};\n\nvar transaction = new Transaction()\n{\n    TransactionBody = transactionBody,\n    TransactionWitnessSet = witnesses,\n    AuxiliaryData = auxData\n};\n')),(0,s.kt)("h3",{id:"more-examples"},"More Examples"),(0,s.kt)("p",null,"Please see the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/CardanoSharp/cardanosharp-wallet/blob/main/CardanoSharp.Wallet.Test/TransactionTests.cs"},"Transaction Tests")))}p.isMDXComponent=!0}}]);